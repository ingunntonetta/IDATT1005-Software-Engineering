datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    username  String   @unique
    email     String   @unique
    firstName String
    lastName  String
    avatarUrl String?

    passwordHash String
    salt         String
    oauthUser    OauthUser[]

    houseHold   Household @relation(fields: [householdId], references: [id], onUpdate: Cascade)
    householdId String
    recipe      Recipe[]
}

model OauthUser {
    oauth_id String @unique
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId   String
    provider String

    @@id([oauth_id, userId])
}

model Household {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    name      String   @default("My Household") /// Max length 24 characters
    joinCode  String   @unique /// Code used to join a household. 8 chars (A-Z, 0-9)

    members       User[]
    shoppingLists ShoppingList[]
    fridgeItems   Fridge[]
}

model Item {
    id   Int    @id @default(autoincrement())
    name String @unique

    shoppingLists ShoppingListItem[]
    recipes       RecipeItem[]
    fridgeItems   Fridge[]
}

model ShoppingList {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String /// Name of the shopping list (such as the week number or name of the store)
    description String? /// Short description (max 255 characters)
    items       ShoppingListItem[]
    archived    Boolean            @default(false)

    household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    householdId String
}

/// An item in a shopping list
model ShoppingListItem {
    purchased Boolean @default(false)

    shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shoppingListId Int

    item   Item @relation(fields: [itemId], references: [id], onUpdate: Cascade)
    itemId Int

    @@id([shoppingListId, itemId])
}

model Recipe {
    id          Int          @id @default(autoincrement())
    createdAt   DateTime     @default(now())
    title       String
    difficulty  Int /// 1-3 (easy, medium, hard)
    time        Int /// Time in minutes
    cost        Int /// 1-3 ($, $$, $$$)
    description String /// Short description (max 255 characters)
    recipeText  String /// The complete recipe itself
    imageUrl    String?
    ingredients RecipeItem[]

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdById String
}

/// An ingredient used in a recipe
model RecipeItem {
    amount String /// The amount & unit of the ingredient, e.g. (5dL, 200g, 1/2tbsp, etc.)

    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    recipeId Int

    item   Item @relation(fields: [itemId], references: [id], onUpdate: Cascade)
    itemId Int

    @@id([recipeId, itemId])
}

/// Many-to-many relation between a household and an item
model Fridge {
    household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    householdId String

    item   Item @relation(fields: [itemId], references: [id], onUpdate: Cascade)
    itemId Int

    @@id([householdId, itemId])
}
